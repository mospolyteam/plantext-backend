version: '3'

services:
  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    networks:
      - plantextNetwork
    logging:
        driver: 'none' # disable saving logs
    restart: always
    ports:
        - 1025:1025 # smtp server
        - 8025:8025 # web ui
  redis:
    image: redis
    restart: always
    container_name: 'redis'
    networks:
      - plantextNetwork
    command: redis-server
    ports:
      - '6379:6379'
  celery:
    build: .
    container_name: 'celery'
    networks:
      - plantextNetwork
    command: celery -A plantext worker -B
    restart: always
    volumes:
      - ./db.sqlite3:/plantext-backend/db.sqlite3
    links:
      - "redis"
    depends_on:
      - api
      - redis
  celery-beat:
    build: .
    container_name: 'celery-beat'
    networks:
      - plantextNetwork
    command: celery -A plantext beat -l info
    volumes:
      - ./db.sqlite3:/plantext-backend/db.sqlite3
    restart: always
    links:
      - "redis"
    depends_on:
      - api
      - redis
  flower:
    build: .
    command: celery -A flower -l info
    container_name: 'flower'
    networks:
      - plantextNetwork
    ports:
      - 5557:5555
    links:
      - "redis"
    restart: always
    depends_on:
      - redis
      - api
  api:
    build:
      context: ./
      dockerfile: ./Dockerfile
    container_name: 'api'
    networks:
      - plantextNetwork
    volumes:
      - ./db.sqlite3:/plantext-backend/db.sqlite3
      - ./static:/plantext-backend/static
      - ./media:/plantext-backend/media
    environment:
      - REDIS_HOST=redis
    restart: always
    ports:
      - 8080:8000
    depends_on:
      - mailhog
    links:
      - "mailhog"
  client:
    build:
      context: ../plantext/
      dockerfile: ./Dockerfile
    container_name: 'client'
    networks:
      - plantextNetwork
    restart: always
    ports:
      - 8030:3000
    depends_on:
      - api
networks:
  plantextNetwork:
    driver: bridge